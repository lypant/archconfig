#!/bin/bash

# Set log file name
LOG_FILE=`pwd`/"archconfig_customize.log"

# Required files - settings and functions
ARCHCONFIG_SETTINGS_FILE="settings"

# Functions and settings files have to be present
if [[ -f $ARCHCONFIG_SETTINGS_FILE ]]; then
    source $ARCHCONFIG_SETTINGS_FILE
else
    echo "File not found: $ARCHCONFIG_SETTINGS_FILE"
    exit 1
fi

# Now, if we have settings loaded, we know functions file name
# under ARCHCONFIG_FUNCTIONS_FILE...
# Check if the file is present
if [[ -f $ARCHCONFIG_FUNCTIONS_FILE ]]; then
    source $ARCHCONFIG_FUNCTIONS_FILE
else
    echo "File not found: $ARCHCONFIG_FUNCTIONS_FILE"
    exit 1
fi

# Regular user

addRegularUser()
{
    log "Adding regular user..."
    #useradd -m -g $USER_MAIN_GROUP -G $USER_ADDITIONAL_GROUPS -s $USER_SHELL $USER_NAME
    executeCommand useradd -m -g $USER_MAIN_GROUP -G $USER_ADDITIONAL_GROUPS -s $USER_SHELL $USER_NAME
    log "Adding regular user...done"
}

setRegularUserPassword()
{
    log "Setting regular user password..."
    local ASK=1

    while [ $ASK -ne 0 ]; do
        log "Provide password for user $USER_NAME"
        #passwd $USER_NAME
        executeCommand passwd $USER_NAME
        ASK=$?
    done
    log "Setting regular user password...done"
}

setSudoers()
{
    log "Setting sudoers..."
    # TODO - do it in a safer way... Here just for experiments
    #echo "$USER_NAME ALL=(ALL) ALL" >> /etc/sudoers
    executeCommand echo "$USER_NAME ALL=(ALL) ALL" >> /etc/sudoers
    log "Setting sudoers...done"
}

# Preparations

updatePackageList()
{
    log "Updating package list..."
    #pacman -Syy
    executeCommand pacman -Syy
    log "Updating package list...done"
}

configurePacman()
{
    log "Configuring pacman..."
    #uncommentVar "TotalDownload" /etc/pacman.conf
    executeCommand uncommentVar "TotalDownload" /etc/pacman.conf
    log "Configuring pacman...done"
}

# Installing

installPackage()
{
    log "Installing packages..."
    #pacman -S --noconfirm "$@"
    executeCommand pacman -S --noconfirm "$@"
    log "Installing packages...done"
}

# Basic tools

# vim

installVim()
{
    log "Installing vim..."
    #installPackage $VIM_PACKAGES
    executeCommand installPackage $VIM_PACKAGES
    log "Installing vim...done"
}

# Sound

installAlsa()
{
    log "Installing alsa..."
    #installPackage $ALSA_PACKAGES
    executeCommand installPackage $ALSA_PACKAGES
    log "Installing alsa...done"
}

# Xorg

installXorgBasic()
{
    log "Installing xorg basics..."
    #installPackage $XORG_BASIC_PACKAGES
    executeCommand installPackage $XORG_BASIC_PACKAGES
    log "Installing xorg basics...done"
}

installXorgAdditional()
{
    log "Installing xorg additionals..."
    #installPackage $XORG_ADDITIONAL_PACKAGES
    executeCommand installPackage $XORG_ADDITIONAL_PACKAGES
    log "Installing xorg additionals...done"
}

# GUI tools etc

# Terminal

installRxvtUnicode()
{
    log "Installing rxvt unicode..."
    #installPackage $RXVTUNICODE_PACKAGES
    executeCommand installPackage $RXVTUNICODE_PACKAGES
    log "Installing rxvt unicode...done"
}

# Font(s)

installGuiFonts()
{
    log "Installing gui fonts..."
    #installPackage $GUI_FONT_PACKAGES
    executeCommand installPackage $GUI_FONT_PACKAGES
    log "Installing gui fonts...done"
}

# WM-related

# TODO Requires: Xorg, git
installDwm()
{
    log "Installing dwm..."
    # Clone project from git
    #git clone http://git.suckless.org/dwm "$DWM_BUILD_PATH"
    executeCommand git clone http://git.suckless.org/dwm "$DWM_BUILD_PATH"
    #cd $DWM_BUILD_PATH
    executeCommand cd $DWM_BUILD_PATH

    # Newest commit was not working... use specific, working version
    #git checkout 4fb31e0 -b archconfig_adjustments
    executeCommand git checkout 4fb31e0 -b archconfig_adjustments

    # Configure necessary settings
    #sed -i 's/PREFIX = \/usr\/local/PREFIX = \/usr/g' "$DWM_BUILD_PATH/config.mk"
    executeCommand sed -i 's/PREFIX = \/usr\/local/PREFIX = \/usr/g' "$DWM_BUILD_PATH/config.mk"
    #sed -i 's/X11INC = \/usr\/X11R6\/include/X11INC = \/usr\/include\/X11/g' "$DWM_BUILD_PATH/config.mk"
    executeCommand sed -i 's/X11INC = \/usr\/X11R6\/include/X11INC = \/usr\/include\/X11/g' "$DWM_BUILD_PATH/config.mk"
    #sed -i 's/X11LIB = \/usr\/X11R6\/lib/X11LIB = \/usr\/lib\/X11/g' "$DWM_BUILD_PATH/config.mk"
    executeCommand sed -i 's/X11LIB = \/usr\/X11R6\/lib/X11LIB = \/usr\/lib\/X11/g' "$DWM_BUILD_PATH/config.mk"
    #sed -i "s/\"st\"/\"$TERMINAL_EMULATOR_COMMAND\"/g" "$DWM_BUILD_PATH/config.def.h"
    executeCommand sed -i "s/\"st\"/\"$TERMINAL_EMULATOR_COMMAND\"/g" "$DWM_BUILD_PATH/config.def.h"

    # Set local author for the project commits
    #git config --local user.name "root"
    executeCommand git config --local user.name "root"
    #git config --local user.email "root@$HOST_NAME"
    executeCommand git config --local user.email "root@$HOST_NAME"

    # Save configuration as new commit
    #git commit -a -m "Archconfig adjustments"
    executeCommand git commit -a -m "Archconfig adjustments"

    # Install
    #make clean install
    executeCommand make clean install
    log "Installing dwm...done"
}

installDmenu()
{
    log "Installing dmenu..."
    #installPackage $DMENU_PACKAGES
    executeCommand installPackage $DMENU_PACKAGES
    log "Installing dmenu...done"
}

# Development etc

# Version control

installGit()
{
    log "Installing git..."
    #installPackage $GIT_PACKAGES
    executeCommand installPackage $GIT_PACKAGES
    log "Installing git...done"
}

# VirtualBox

# Guest utils

installVirtualboxGuestAdditions()
{
    log "Installing virtualbox guest additions..."
    # Install the packages
    #installPackage $VIRTUALBOX_GUEST_UTILS_PACKAGES
    executeCommand installPackage $VIRTUALBOX_GUEST_UTILS_PACKAGES

    # Load required modules
    #modprobe -a $VIRTUALBOX_GUEST_UTILS_MODULES
    executeCommand modprobe -a $VIRTUALBOX_GUEST_UTILS_MODULES

    # Setup modules to be loaded on startup
    if [ ! -z "$VIRTUALBOX_GUEST_UTILS_MODULES" ]; then
        for module in $VIRTUALBOX_GUEST_UTILS_MODULES
        do
            #echo $module >> $VIRTUALBOX_GUEST_UTILS_MODULES_FILE
            executeCommand echo $module >> $VIRTUALBOX_GUEST_UTILS_MODULES_FILE
        done
    fi
    log "Installing virtualbox guest additions...done"
}

# Misc config

setConsoleVideoMode()
{
    log "Setting console video mode..."
    # Not using var for /dev/ - caused sed problems interpreting / character
    #sed -i "s/APPEND root=\/dev\/$ROOT_PARTITION_HDD$ROOT_PARTITION_NB rw/APPEND root=\/dev\/$ROOT_PARTITION_HDD$ROOT_PARTITION_NB $BOOTLOADER_KERNEL_PARAMS/" /boot/syslinux/syslinux.cfg
    executeCommand sed -i "s/APPEND root=\/dev\/$ROOT_PARTITION_HDD$ROOT_PARTITION_NB rw/APPEND root=\/dev\/$ROOT_PARTITION_HDD$ROOT_PARTITION_NB $BOOTLOADER_KERNEL_PARAMS/" /boot/syslinux/syslinux.cfg
    log "Setting console video mode...done"
}

disableSyslinuxBootMenu()
{
    log "Disabling syslinux boot menu..."
    #commentVar UI /boot/syslinux/syslinux.cfg
    executeCommand commentVar UI /boot/syslinux/syslinux.cfg
    log "Disabling syslinux boot menu...done"
}

setConsoleLoginMessage()
{
    log "Setting console login message..."
    # Remove welcome message
    #rm -f $CONSOLE_WELCOME_FILE
    executeCommand rm -f $CONSOLE_WELCOME_FILE

    # Set new welcome message, if present.
    if [ ! -z "$CONSOLE_WELCOME_MSG" ];then
        #echo $CONSOLE_WELCOME_MSG > $CONSOLE_WELCOME_FILE
        executeCommand echo $CONSOLE_WELCOME_MSG > $CONSOLE_WELCOME_FILE
    fi
    log "Setting console login message...done"
}

# This requires image recreation for changes to take effect
useEarlyTerminalFont()
{
    log "Setting early terminal font usage..."
    # Add "consolefont keymap" hooks
    # TODO - write a function for extending such lists
    # TODO   (original list might change and we don't care about the list, we want just to add sth)
    local ORIGINAL_LIST="base udev autodetect modconf block filesystems keyboard fsck"
    local NEW_LIST="$ORIGINAL_LIST consolefont keymap"

    #sed -i "s/HOOKS=\"$ORIGINAL_LIST\"/HOOKS=\"$NEW_LIST\"/g" /etc/mkinitcpio.conf
    executeCommand sed -i "s/HOOKS=\"$ORIGINAL_LIST\"/HOOKS=\"$NEW_LIST\"/g" /etc/mkinitcpio.conf
    log "Setting early terminal font usage...done"
}

recreateImage()
{
    log "Recreating linux image..."
    #mkinitcpio -p linux
    executeCommand mkinitcpio -p linux
    log "Recreating linux image...done"
}

changeHomeOwnership()
{
    log "Changing home dir ownership..."
    #chown -R $USER_NAME:users $USER_HOME
    executeCommand chown -R $USER_NAME:users $USER_HOME
    log "Changing home dir ownership...done"
}

################################################################################

# Regular user

addRegularUser
setRegularUserPassword
setSudoers

installDotfile $DOTFILE_BASHRC
installDotfile $DOTFILE_BASH_PROFILE

# Preparations
updatePackageList
configurePacman

# Installing

# VirtualBox
installVirtualboxGuestAdditions

# Basic tools
installVim
installDotfile $DOTFILE_VIM
installNestedDotfile $DOTFILE_VIM_COLORS_SOLARIZED_PATH $DOTFILE_VIM_COLORS_SOLARIZED_FILE

# Sound
installAlsa

# Xorg
installXorgBasic
installXorgAdditional

# GUI tools etc
installRxvtUnicode
installGuiFonts
installDmenu

# Development etc
installGit
# TODO Think about moving it into installGit function - here should be only function calls without params
installDotfile $GIT_DOTFILE

# Dwm (requires Xorg and git)
installDwm

# Misc config
setConsoleVideoMode
setConsoleLoginMessage
disableSyslinuxBootMenu
useEarlyTerminalFont    # Image needs to be recreated afterwards
recreateImage

# Install xinitrc dotfile
installDotfile $XINITRC_DOTFILE

# Make sure all in user's home is owned by the user, not root
changeHomeOwnership

