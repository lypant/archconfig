#!/bin/bash

# Required files - settings
ARCHCONFIG_SETTINGS_FILE="settings"

# Settings file has to be present
if [[ -f $ARCHCONFIG_SETTINGS_FILE ]]; then
    source $ARCHCONFIG_SETTINGS_FILE
else
    echo "File not found: $ARCHCONFIG_SETTINGS_FILE"
    exit 1
fi

executeCommand()
{
    # Record command to be executed to the command file
    echo "$ARCHCONFIG_CMD_PREFIX$@" >> $LOG_FILE

    # Execute command
    # Redirect stdout and stderr to screen and log file
    (eval "$@" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

log()
{
    # Use msg with prefix to distinguish Archconfig logs
    local msg="$ARCHCONFIG_LOG_PREFIX$@"

    # Write message to screen and log file only ()
    (echo "$msg" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

terminateScriptOnError()
{
    local error="$1"
    local function="$2"
    local msg="$3"

    if [ $error -ne 0 ]; then
        log "$function: $msg: $error"
        log "Aborting script!"
        exit 1
    fi
}

uncommentVar ()
{
    if [ $# -lt 2 ];then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

	local var="$1"
	local file="$2"

    executeCommand "sed -i \"s/^#\(${var}.*\)$/\1/\" ${file}"
    return $?
}

commentVar ()
{
    if [ $# -lt 2 ];then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

	local var="$1"
	local file="$2"

    executeCommand "sed -i \"s/^\(${var}.*\)$/#\1/\" ${file}"
    return $?
}

archChroot()
{
     if [ $# -lt 1 ];then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    executeCommand arch-chroot $ROOT_PARTITION_MOUNT_POINT /bin/bash -c \""$@"\"
    return $?
}

downloadFile()
{
    if [ $# -lt 2 ]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local src=$1
    local dst=$2

    executeCommand "curl -so $dst --create-dirs $src"
    return $?
}

backupFile()
{
    if [ $# -lt 2 ]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local original=$1
    local backup=$2
    local retval=0

    # If original file exists, move it to backup dir
    if [ -e $original ]; then
        # File exists
        # Backup the file
        executeCommand "cp $original $backup"
        retval=$?
    fi
    return $retval
}

createLink()
{
    if [ $# -lt 2 ]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local linkName=$1
    local linkTarget=$2
    local retval=0

    # Check if target exists
    if [ -e $linkTarget ]; then
        # File exists
        # create symlink
        executeCommand "ln -s $linkTarget $linkName"
        retval=$?
    fi
    return $retval
}

installDotfile()
{
    if [ $# -lt 1 ]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local dotfileName=$1
    local url=$DOTFILES_REPOSITORY_RAW_URL/$dotfileName
    local downloadDst=$DOTFILES_DIR_PATH/$dotfileName
    local now=`date +"%Y%m%d_%H%M"`
    local retval=0

    downloadFile $url $downloadDst
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to download file: $retval"
        return 2
    fi

    # Check if backup dir exists
    if [ ! -d $DOTFILES_BACKUP_DIR ]; then
        executeCommand "mkdir -p $DOTFILES_BACKUP_DIR"
        retval=$?
        if [ $retval -ne 0 ]; then
            log "$FUNCNAME: failed to create dir: $retval"
            return 3
        fi
    fi

    backupFile "$USER_HOME/$dotfileName" "$DOTFILES_BACKUP_DIR/$dotfileName"_"$now"
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to backup file: $retval"
        return 4
    fi

    executeCommand "rm -f $USER_HOME/$dotfileName"
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCAME: failed to original dotfile: $retval"
        return 5
    fi

    createLink $USER_HOME/$dotfileName $downloadDst
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCAME: failed to create link: $retval"
        return 6
    fi

    return $retval
}

installNestedDotfile()
{
    if [ $# -lt 2 ]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local dotfilePath=$1
    local dotfileName=$2
    local url=$DOTFILES_REPOSITORY_RAW_URL/$dotfilePath/$dotfileName
    local downloadDst=$DOTFILES_DIR_PATH/$dotfilePath/$dotfileName
    local now=`date +"%Y%m%d_%H%M"`
    local retval=0

    downloadFile $url $downloadDst
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to download file: $retval"
        return 2
    fi

    # Check if backup dir exists
    if [ ! -d $DOTFILES_BACKUP_DIR ]; then
        executeCommand "mkdir -p $DOTFILES_BACKUP_DIR"
        retval=$?
        if [ $retval -ne 0 ]; then
            log "$FUNCNAME: failed to create dir: $retval"
            return 3
        fi
    fi

    backupFile "$USER_HOME/$dotfilePath/$dotfileName" "$DOTFILES_BACKUP_DIR/$dotfilePath/$dotfileName"_"$now"
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to backup file: $retval"
        return 4
    fi

    executeCommand "rm -f $USER_HOME/$dotfilePath/$dotfileName"
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to remove dotfile: $retval"
        return 5
    fi

    if [ ! -d $USER_HOME/$dotfilePath ]; then
        executeCommand "mkdir -p $USER_HOME/$dotfilePath"
        retval=$?
        if [ $retval -ne 0 ]; then
            log "$FUNCNAME: failed to create dir: $retval"
            return 6
        fi
    fi

    createLink $USER_HOME/$dotfilePath/$dotfileName $downloadDst
    retval=$?
    if [ $retval -ne 0 ]; then
        log "$FUNCNAME: failed to create ling: $retval"
        return 7
    fi

    return $retval
}

enableService()
{
    if [ $# -lt 1 ];then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

    local service="$1"

    executeCommand "systemctl enable $service"
    return $?
}

