#!/bin/bash

# Required files - settings
ARCHCONFIG_SETTINGS_FILE="settings"

# Settings file has to be present
if [[ -f $ARCHCONFIG_SETTINGS_FILE ]]; then
    source $ARCHCONFIG_SETTINGS_FILE
else
    echo "File not found: $ARCHCONFIG_SETTINGS_FILE"
    exit 1
fi

doUncommentVar ()
{
	local VAR="$1"
	local FILE="$2"
	local BASE_CMD="sed"
	local CMD=""

	if [ $# -gt 2 ]; then
		if [ $3 == "sudo" ]; then
			CMD="sudo $BASE_CMD"
		fi
	else
		CMD="$BASE_CMD"
	fi

    $CMD -i "s/^#\(${VAR}.*\)$/\1/" "${FILE}"
}

uncommentVar ()
{
    if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	doUncommentVar "$1" "$2"
}

uncommentVarSudo ()
{
     if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	doUncommentVar "$1" "$2" "sudo"
}

doCommentVar ()
{
	local VAR="$1"
	local FILE="$2"
	local BASE_CMD="sed"
	local CMD=""

	if [ $# -gt 2 ]; then
		if [ $3 == "sudo" ]; then
			CMD="sudo $BASE_CMD"
		fi
	else
		CMD="$BASE_CMD"
	fi

    $CMD -i "s/^\(${VAR}.*\)$/#\1/" "${FILE}"
}

commentVar ()
{
    if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	doCommentVar "$1" "$2"
}

commentVarSudo ()
{
     if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	doCommentVar "$1" "$2" "sudo"
}

archChroot()
{
     if [ $# -lt 1 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    arch-chroot $ROOT_PARTITION_MOUNT_POINT /bin/bash -c "${1}"
}

downloadFile()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local src=$1
    local dst=$2

    curl -so $dst --create-dirs $src
}

backupFile()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local original=$1
    local backup=$2

    # If original file exists, move it to backup dir
    if [ -e $original ]; then
        # File exists
        # Backup the file
        cp $original $backup
    fi
}

createLink()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local linkName=$1
    local linkTarget=$2

    # Check if target exists
    if [ -e $linkTarget ]; then
        # File exists
        # create symlink
        ln -s $linkTarget $linkName
    fi
}

installDotfile()
{
     if [ $# -lt 1 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local dotfileName=$1
    local url=$DOTFILES_REPOSITORY_RAW_URL/$dotfileName
    local downloadDst=$DOTFILES_DIR_PATH/$dotfileName
    local now=`date +"%Y%m%d_%H%M"`

    downloadFile $url $downloadDst

    # Check if backup dir exists
    if [ ! -d $DOTFILE_BACKUP_DIR ]; then
        mkdir -p $DOTFILE_BACKUP_DIR
    fi
    backupFile $USER_HOME/$dotfileName $DOTFILES_BACKUP_DIR/$dotfileName_$now

    rm -f $USER_HOME/$dotfileName
    createLink $USER_HOME/$dotfileName $downloadDst
}

