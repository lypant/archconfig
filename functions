#!/bin/bash

# Required files - settings
ARCHCONFIG_SETTINGS_FILE="settings"

# Settings file has to be present
if [[ -f $ARCHCONFIG_SETTINGS_FILE ]]; then
    source $ARCHCONFIG_SETTINGS_FILE
else
    echo "File not found: $ARCHCONFIG_SETTINGS_FILE"
    exit 1
fi

executeCommand()
{
    (eval "$@" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

log()
{
    executeCommand "echo $@"
}

uncommentVar ()
{
    if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	local var="$1"
	local file="$2"

    sed -i "s/^#\(${var}.*\)$/\1/" "${file}"
}

commentVar ()
{
    if [ $# -lt 2 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

	local var="$1"
	local file="$2"

    sed -i "s/^\(${var}.*\)$/#\1/" "${file}"
}

archChroot()
{
     if [ $# -lt 1 ];then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    arch-chroot $ROOT_PARTITION_MOUNT_POINT /bin/bash -c "${1}"
}

downloadFile()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local src=$1
    local dst=$2

    curl -so $dst --create-dirs $src
}

backupFile()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local original=$1
    local backup=$2

    # If original file exists, move it to backup dir
    if [ -e $original ]; then
        # File exists
        # Backup the file
        cp $original $backup
    fi
}

createLink()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local linkName=$1
    local linkTarget=$2

    # Check if target exists
    if [ -e $linkTarget ]; then
        # File exists
        # create symlink
        ln -s $linkTarget $linkName
    fi
}

installDotfile()
{
    if [ $# -lt 1 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local dotfileName=$1
    local url=$DOTFILES_REPOSITORY_RAW_URL/$dotfileName
    local downloadDst=$DOTFILES_DIR_PATH/$dotfileName
    local now=`date +"%Y%m%d_%H%M"`

    downloadFile $url $downloadDst

    # Check if backup dir exists
    if [ ! -d $DOTFILES_BACKUP_DIR ]; then
        mkdir -p $DOTFILES_BACKUP_DIR
    fi
    backupFile "$USER_HOME/$dotfileName" "$DOTFILES_BACKUP_DIR/$dotfileName"_"$now"

    rm -f $USER_HOME/$dotfileName
    createLink $USER_HOME/$dotfileName $downloadDst
}

installNestedDotfile()
{
    if [ $# -lt 2 ]; then
        echo $FUNCNAME: not enough parameters \($#\): "$@"
        return 1
    fi

    local dotfilePath=$1
    local dotfileName=$2
    local url=$DOTFILES_REPOSITORY_RAW_URL/$dotfilePath/$dotfileName
    local downloadDst=$DOTFILES_DIR_PATH/$dotfilePath/$dotfileName
    local now=`date +"%Y%m%d_%H%M"`

    downloadFile $url $downloadDst

    # Check if backup dir exists
    if [ ! -d $DOTFILES_BACKUP_DIR ]; then
        mkdir -p $DOTFILES_BACKUP_DIR
    fi
    backupFile "$USER_HOME/$dotfilePath/$dotfileName" "$DOTFILES_BACKUP_DIR/$dotfilePath/$dotfileName"_"$now"

    rm -f $USER_HOME/$dotfilePath/$dotfileName

    if [ ! -d $USER_HOME/$dotfilePath ]; then
        mkdir -p $USER_HOME/$dotfilePath
    fi

    createLink $USER_HOME/$dotfilePath/$dotfileName $downloadDst
}

